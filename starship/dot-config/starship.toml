format = """
$username\
$hostname\
$directory\
${custom.git_branch}\
${custom.git_commit}\
${custom.git_metrics}\
${custom.git_state}\
${custom.git_status}\
${custom.jj}\
$nix_shell\
$docker_context\
$rust\
$golang\
$zig\
$python\
$lua\
$c\
$haskell\
$package\
$fill\
$cmd_duration\
$time\
$line_break\
$status\
$character\
"""

[directory]
truncation_length = 0
truncation_symbol = '…/'
fish_style_pwd_dir_length = 1

[git_branch]
format = '[$symbol$branch(:$remote_branch)]($style) '
symbol = ''
style = "bold white"

[git_commit]
style = "bold white"

[git_state]
style = "bold white"

[git_metrics]
disabled = false

[git_status]
style = "bold white"

# re-enable git_branch as long as we're not in a jj repo
[custom.git_branch]
when = "! jj root --ignore-working-copy"
command = "starship module git_branch"
description = "Only show git_branch if we're not in a jj repo"

# re-enable git_commit as long as we're not in a jj repo
[custom.git_commit]
when = "! jj root --ignore-working-copy"
command = "starship module git_commit"
description = "Only show git_commit if we're not in a jj repo"

# re-enable git_metrics as long as we're not in a jj repo
[custom.git_metrics]
when = "! jj root --ignore-working-copy"
command = "starship module git_metrics"
description = "Only show git_metrics if we're not in a jj repo"

# re-enable git_state as long as we're not in a jj repo
[custom.git_state]
when = "! jj root --ignore-working-copy"
command = "starship module git_state"
description = "Only show git_state if we're not in a jj repo"

# re-enable git_status as long as we're not in a jj repo
[custom.git_status]
when = "! jj root --ignore-working-copy"
command = "starship module git_status"
description = "Only show git_status if we're not in a jj repo"

# custom module for jj status
[custom.jj]
style = "purple bold"
symbol = "󱗆 "
description = "The current jj status"
detect_folders = [".jj"]
command = '''
jj log --revisions @ --no-graph --ignore-working-copy --color always --limit 1 --template '
  separate(" ",
    change_id.shortest(4),
    bookmarks,
    "|",
    concat(
      if(conflict, "💥"),
      if(divergent, "🚧"),
      if(hidden, "👻"),
      if(immutable, "🔒"),
    ),
    if(empty, "(empty)"),
    coalesce(
      truncate_end(29, description.first_line(), "…"),
      "(no description set)",
    )
  )
'
'''

[fill]
symbol = ' '

[cmd_duration]
format = '[⏱️$duration]($style) '
style = "yellow"
min_time = 1000

[time]
disabled = false
format = '[$time]($style)'
style = "bright-white"

[status]
disabled = false
format = '[$status]($style)'

[nix_shell]
format = '[$symbol$state(\($name\))]($style) '
symbol = '❄️'

[docker_context]
format = '[$symbol]($style) '
symbol = '🐳'

[rust]
format = '[$symbol($version)]($style) '
symbol = '🦀'

[golang]
format = '[$symbol($version)]($style) '
symbol = '🐹'

[zig]
format = '[$symbol($version)]($style) '
symbol = '↯'

[python]
format = '[${symbol}(${version})(\($virtualenv\))]($style) '
symbol = '🐍'
pyenv_version_name = true

[lua]
format = '[$symbol($version)]($style) '
symbol = '🌙'

[c]
format = '[$symbol($version(-$name))]($style) '
symbol = 'C'

[haskell]
format = '[$symbol($version)]($style) '
symbol = 'λ'

[package]
format = '[$symbol$version]($style) '
symbol = '📦'
